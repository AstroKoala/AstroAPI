/*
 * This file is generated by jOOQ.
 */
package com.example.db.tables;


import com.example.db.Indexes;
import com.example.db.Java;
import com.example.db.Keys;
import com.example.db.tables.records.FriendshipRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Friendship extends TableImpl<FriendshipRecord> {

    private static final long serialVersionUID = 1935787933;

    /**
     * The reference instance of <code>Java.Friendship</code>
     */
    public static final Friendship FRIENDSHIP = new Friendship();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FriendshipRecord> getRecordType() {
        return FriendshipRecord.class;
    }

    /**
     * The column <code>Java.Friendship.id</code>.
     */
    public final TableField<FriendshipRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>Java.Friendship.first_user_id</code>.
     */
    public final TableField<FriendshipRecord, Integer> FIRST_USER_ID = createField(DSL.name("first_user_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>Java.Friendship.second_user_id</code>.
     */
    public final TableField<FriendshipRecord, Integer> SECOND_USER_ID = createField(DSL.name("second_user_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>Java.Friendship.friends_since</code>.
     */
    public final TableField<FriendshipRecord, Timestamp> FRIENDS_SINCE = createField(DSL.name("friends_since"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>Java.Friendship</code> table reference
     */
    public Friendship() {
        this(DSL.name("Friendship"), null);
    }

    /**
     * Create an aliased <code>Java.Friendship</code> table reference
     */
    public Friendship(String alias) {
        this(DSL.name(alias), FRIENDSHIP);
    }

    /**
     * Create an aliased <code>Java.Friendship</code> table reference
     */
    public Friendship(Name alias) {
        this(alias, FRIENDSHIP);
    }

    private Friendship(Name alias, Table<FriendshipRecord> aliased) {
        this(alias, aliased, null);
    }

    private Friendship(Name alias, Table<FriendshipRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Friendship(Table<O> child, ForeignKey<O, FriendshipRecord> key) {
        super(child, key, FRIENDSHIP);
    }

    @Override
    public Schema getSchema() {
        return Java.JAVA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FRIENDSHIP_PRIMARY, Indexes.FRIENDSHIP_SECOND_USER_ID_IDX);
    }

    @Override
    public Identity<FriendshipRecord, Integer> getIdentity() {
        return Keys.IDENTITY_FRIENDSHIP;
    }

    @Override
    public UniqueKey<FriendshipRecord> getPrimaryKey() {
        return Keys.KEY_FRIENDSHIP_PRIMARY;
    }

    @Override
    public List<UniqueKey<FriendshipRecord>> getKeys() {
        return Arrays.<UniqueKey<FriendshipRecord>>asList(Keys.KEY_FRIENDSHIP_PRIMARY);
    }

    @Override
    public Friendship as(String alias) {
        return new Friendship(DSL.name(alias), this);
    }

    @Override
    public Friendship as(Name alias) {
        return new Friendship(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Friendship rename(String name) {
        return new Friendship(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Friendship rename(Name name) {
        return new Friendship(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, Integer, Timestamp> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
